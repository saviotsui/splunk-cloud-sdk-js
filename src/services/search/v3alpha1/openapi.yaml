components:
  parameters:
    AuthorizationHeader:
      description: |
        Access token provided by the user, obtained from a known identity provider.
      in: header
      name: Authorization
      required: true
      schema:
        pattern: ^Bearer .+
        type: string
    Earliest:
      description: |
        The earliest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC  in seconds using the ISO-8601 (%FT%T.%Q) format.  For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC.  Any offset specified is ignored.
      in: query
      name: earliest
      schema:
        type: string
    Field:
      description: |
        A field to return for the result set. You can specify multiple fields of comma-separated values if multiple fields  are required.
      in: query
      name: field
      schema:
        type: string
    Latest:
      description: |
        The latest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC  in seconds using the ISO-8601 (%FT%T.%Q) format.  For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC.  Any offset specified is ignored.
      in: query
      name: latest
      schema:
        type: string
    StatusCount:
      description: |
        The maximum number of jobs that you want to return the status entries for.
      in: query
      name: count
      schema:
        default: 1000
        type: number
    StatusFilter:
      description: |
        Filter the list of jobs by status. Valid status values are  'running', 'done', 'canceled', or 'failed'.
      in: query
      name: status
      schema:
        $ref: '#/components/schemas/SearchStatus'
    count:
      description: |
        The maximum number of entries to return. Set to 0 to return all available entries.
      in: query
      name: count
      schema:
        default: 30
        type: number
    offset:
      description: Index of first item to return.
      in: query
      name: offset
      schema:
        default: 0
        type: number
    rsid:
      description: The recurring job ID.
      in: path
      name: rsid
      required: true
      schema:
        type: string
    sid:
      description: The search ID.
      in: path
      name: sid
      required: true
      schema:
        type: string
    tenant:
      description: The system tenant ID.
      in: path
      name: tenant
      required: true
      schema:
        type: string
  schemas:
    Error:
      properties:
        code:
          type: string
        details:
          items:
            type: object
          type: array
        message:
          type: string
      type: object
    FieldsSummary:
      description: |
        Fields statistics summary model of the events to-date for  search ID (sid).
      properties:
        duration:
          description: |
            The amount of time, in seconds, that a time bucket  spans from the earliest to the latest time.
          type: number
        earliestTime:
          description: |
            If specified, the earliest timestamp in UTC format  of the events to process.
          type: string
        eventCount:
          description: |
            The total number of events for all fields returned  in the time range ('earliestTime' and 'latestTime') specified.
          type: integer
        fields:
          additionalProperties:
            $ref: '#/components/schemas/SingleFieldSummary'
          description: A map of the fields in the time range specified.
          type: object
        latestTime:
          description: |
            If specified, the latest timestamp in UTC format  of the events to process.
          type: string
      type: object
    ListSearchResultsResponse:
      description: |
        The structure of the search results or events metadata that  is returned for the job with the specified search ID (sid). When a search is running, it might return incomplete or truncated  search results. Incomplete search results occur when a search  has not completed. Wait until search completes for the full result set. Truncated search results occur because the number of requested  results exceeds the page limit. Follow the 'nextLink' URL to  retrieve the next page of results.
      properties:
        fields:
          items:
            properties:
              dataSource:
                type: string
              groupbyRank:
                type: string
              name:
                type: string
              splitField:
                type: string
              splitValue:
                type: string
              splitbySpecial:
                type: string
              typeSpecial:
                type: string
            required:
            - name
            type: object
          type: array
        messages:
          items:
            $ref: '#/components/schemas/Message'
          type: array
        nextLink:
          type: string
        results:
          items:
            type: object
          type: array
        wait:
          type: string
      required:
      - results
      type: object
    Message:
      description: |
        The message field in search results or search jobs.  The types of messages are INFO, DEBUG, FATAL, and ERROR.
      properties:
        text:
          type: string
        type:
          enum:
          - INFO
          - DEBUG
          - FATAL
          - ERROR
          type: string
    QueryParameters:
      description: |
        Represents parameters on the search job, such as  'earliest' and 'latest'.
      properties:
        earliest:
          default: -24h@h
          description: |
            The earliest time, in absolute or relative format, to retrieve events.  When specifying an absolute time specify either UNIX time,  or UTC in seconds using the ISO-8601 (%FT%T.%Q) format.  For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC.  Any offset specified is ignored.
          type: string
        latest:
          default: now
          description: |
            The latest time, in absolute or relative format, to retrieve events.  When specifying an absolute time specify either UNIX time,  or UTC in seconds using the ISO-8601 (%FT%T.%Q) format.  For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC.  Any offset specified is ignored.
          type: string
        relativeTimeAnchor:
          default: The system time when the search job is created.
          description: |
            Relative values for the 'earliest' and 'latest' parameters  snap to the unit that you specify.  For example, if 'earliest' is set to -d@d, the unit is day.  If the 'relativeTimeAnchor' is is set to '1994-11-05T13:15:30Z'  then 'resolvedEarliest' is snapped to '1994-11-05T00:00:00Z',  which is the day. Hours, minutes, and seconds are dropped.  If no 'relativeTimeAnchor' is specified, the default value  is set to the time the search job was created.
          format: date-time
          type: string
        timezone:
          description: |
            The timezone that relative time specifiers are based off of.  Timezone only applies to relative time literals for 'earliest' and 'latest'.  If UNIX time or UTC format is used for 'earliest' and 'latest',  this field is ignored. For the list of supported timezone formats, see https://docs.splunk.com/Documentation/Splunk/latest/Data/Applytimezoneoffsetstotimestamps#zoneinfo_.28TZ.29_database type: string default: "GMT"
      type: object
    RecurringSearch:
      description: A fully constructed recurring search, including read-only fields.
      properties:
        app:
          description: The app in which the recurring search is created.
          type: string
        createdAt:
          description: The time the recurring search was created.
          format: date-time
          readOnly: true
          type: string
        createdBy:
          description: The user who created the recurring search.
          readOnly: true
          type: string
        description:
          description: |
            The user-defined description for this recurring search. There is no limit on the length of the description.
          type: string
        enabled:
          default: true
          description: |
            Specifies whether this recurring search is enabled  (runs on the specified interval) or disabled.
          type: boolean
        interval:
          description: |
            The recurrence interval for the recurring search  specified using relative time specifier literals.
          enum:
          - 15m
          - 30m
          - 1h
          - 12h
          - 24h
          type: string
        modifiedAt:
          description: The time the recurring search was last modified.
          format: date-time
          readOnly: true
          type: string
        modifiedBy:
          description: The user who last modified the recurring search.
          readOnly: true
          type: string
        module:
          default: ""
          description: |
            The module to run the search in.  The default module is used if a module is not specified. The maximum lengeth for a module name is 100 characters.
          type: string
        name:
          description: |
            The user-defined name for this recurring search. The maximum length for a name is 100 characters.
          maxLength: 100
          type: string
        query:
          description: |
            The SPL search string for the recurring search including  conditions, predicates, and triggers.
          format: SPL (v2)
          type: string
        queryParameters:
          allOf:
          - $ref: '#/components/schemas/QueryParameters'
          description: |
            Represents parameters on the search job such as 'earliest'.  By default, the 'earliest' parameter is set based on the recurrence  interval. For example, if the interval is set to '1h', the default  value for 'earliest' is set to '-1h' by the platform.  The 'latest' and 'relativeTimeAnchor' parameters are reserved.  The readonly fields for recurring searches and their values are  determined by the platform.
        rsid:
          description: The ID assigned to the recurring search.
          readOnly: true
          type: string
        title:
          description: |
            The user-defined title for this recurring search. There is no limit on the length of the title.
          type: string
      required:
      - interval
      - query
      - name
      type: object
    SearchJob:
      description: A fully-constructed search job, including read-only fields.
      properties:
        allowSideEffects:
          description: |
            Specifies whether a search that contains commands with side effects  (with possible security risks) is allowed to run. type: boolean default: false
        collectEventSummary:
          default: false
          description: |
            Specifies whether a search is allowed to collect events summary  information during the run time.
          type: boolean
        collectFieldSummary:
          default: false
          description: |
            Specifies whether a search is allowed to collect fields summary  information during the run time.
          type: boolean
        collectTimeBuckets:
          default: false
          description: |
            Specifies whether a search is allowed to collect timeline buckets  summary information during the run time.
          type: boolean
        completionTime:
          description: |
            The time, in GMT, that the search job is finished.  Empty if the search job has not completed.
          readOnly: true
          type: string
        dispatchTime:
          description: |
            The time, in GMT, that the search job is dispatched.
          readOnly: true
          type: string
        enablePreview:
          default: false
          description: |
            Specifies whether a search is allowed to collect preview results  during the run time.
          type: boolean
        extractAllFields:
          default: false
          description: |
            Specifies whether the Search service should extract all of the  available fields in the data, including fields not mentioned in the  SPL for the search job. Set to 'false' for better search peformance.
          type: boolean
        maxTime:
          default: 3600
          description: |
            The number of seconds to run the search before finalizing the search.  The default value is 3600 seconds (1 hour).  The maximum value is 21600 seconds (6 hours).
          maximum: 21600
          minimum: 1
          type: number
        messages:
          items:
            $ref: '#/components/schemas/Message'
          type: array
        module:
          default: ""
          description: |
            The module to run the search in. The default module is  used if a module is not specified.
          type: string
        name:
          description: The name of the created search job.
          maxLength: 100
          readOnly: true
          type: string
        parent:
          description: |
            The 'rsid' of an associated recurring-search, if this search  job is dispatched by a recurring-search.
          readOnly: true
          type: string
        percentComplete:
          default: 0
          description: |
            An estimate of the percent of time remaining  before the job completes.
          readOnly: true
          type: integer
        previewAvailable:
          default: false
          description: |
            Specifies if preview results are available for the search job.  The valid status values are 'unknown', 'true', and 'false'.
          readOnly: true
          type: string
        query:
          description: The SPL search string.
          format: SPL (v2)
          type: string
        queryParameters:
          allOf:
          - $ref: '#/components/schemas/QueryParameters'
          description: |
            Represents parameters on the search job such as  'earliest' and 'latest'.
        requiredFreshness:
          default: 0
          description: |
            Specifies a maximum time interval, in seconds, between identical existing searches. The 'requiredFreshness' parameter is used to determine if an existing search with the same query and the same time boundaries can be reused, instead of running the same search again. Freshness is applied to the resolvedEarliest and resolvedLatest parameters. If an existing search has the same exact criteria as this search and the resolvedEarliest and resolvedLatest values are within the freshness interval, the existing search metadata is returned instead of initiating a new search job. By default, the requiredFreshness parameter is set to 0 which means that the platform does not attempt to use an existing search.
          type: number
        resolvedEarliest:
          description: |
            The earliest time speciifed as an absolute value in GMT.  The time is computed based on the values you specify for the  'timezone' and 'earliest' queryParameters.
          readOnly: true
          type: string
        resolvedLatest:
          description: |
            The latest time specified as an absolute value in GMT.  The time is computed based on the values you specify for the  'timezone' and 'earliest' queryParameters.
          readOnly: true
          type: string
        resultsAvailable:
          default: 0
          description: The number of results produced so far for the search job.
          readOnly: true
          type: integer
        resultsPreviewAvailable:
          default: 0
          description: |
            The number of the preview search results for the job with the  specified search ID (sid).
          readOnly: true
          type: integer
        sid:
          description: The ID assigned to the search job.
          readOnly: true
          type: string
        status:
          $ref: '#/components/schemas/SearchStatus'
      required:
      - query
      type: object
    SearchStatus:
      description: |
        The current status of the search job. The valid status values are  'running', 'done', 'canceled', and 'failed'.
      enum:
      - running
      - done
      - canceled
      - failed
      type: string
    SingleFieldSummary:
      description: Summary of each field.
      properties:
        count:
          description: The total number of events that contain the field.
          type: integer
        distictCount:
          description: The total number of unique values in the field.
          type: integer
        isExact:
          description: |
            Specifies if the 'distinctCount' is accurate.  The 'isExact' property is FALSE when the 'distinctCount'  exceeds the maximum count and an exact count is not available.
          type: boolean
        max:
          description: The maximum numeric values in the field.
          type: string
        mean:
          description: The mean (average) for the numeric values in the field.
          type: number
        min:
          description: The minimum numeric values in the field.
          type: string
        modes:
          description: An array of the values in the field.
          items:
            allOf:
            - $ref: '#/components/schemas/SingleValueMode'
          type: array
        numericCount:
          description: The count of the numeric values in the field.
          type: integer
        relevant:
          description: Specifies if the field was added or changed by the search.
          type: boolean
        stddev:
          description: The standard deviation for the numeric values in the field.
          type: number
      type: object
    SingleTimeBucket:
      description: Events summary in a single time bucket.
      properties:
        availableCount:
          description: |
            Count of available events. Not all events in a bucket  are retrievable. Typically this count is capped at 10000.
          type: integer
        duration:
          type: number
        earliestTime:
          description: |
            The timestamp of the earliest event in the current bucket,  in UNIX format. This is the same time as 'earliestTimeStrfTime'  in UNIX format.
          type: number
        earliestTimeStrfTime:
          description: |
            The timestamp of the earliest event in the current bucket,  in UTC format with seconds. For example 2019-01-25T13:15:30Z,  which follows the ISO-8601 (%FT%T.%Q) format.
          type: string
        isFinalized:
          description: |
            Specifies if all of the events in the current bucket  have been finalized.
          type: boolean
        totalCount:
          description: The total count of the events in the current bucket.
          type: integer
      readOnly: true
      type: object
    SingleValueMode:
      description: Single value summary of the field.
      properties:
        count:
          description: The number of occurences that the value appears in a field.
          type: integer
        isExact:
          description: |
            Specifies if the count is accurate.  The 'isExact' property is FALSE when the 'count' exceeds  the maximum count and an exact count is not available.
          type: boolean
        value:
          description: The value in the field.
          type: string
      type: object
    TimeBucketsSummary:
      description: |
        A timeline metadata model of the event distribution.  The model shows the untransformed events that are read to date  for a specific for search ID (sid).
      properties:
        IsTimeCursored:
          description: Specifies if the events are returned in time order.
          type: boolean
        buckets:
          items:
            allOf:
            - $ref: '#/components/schemas/SingleTimeBucket'
          type: array
        cursorTime:
          description: |
            Identifies where the cursor is, in processing the events.  The 'cursorTime' is a timestamp specified in UNIX time.
          type: number
        eventCount:
          description: The number of events processed at the 'cursorTime'.
          type: integer
      type: object
    UpdateJob:
      description: Update a search job with a status.
      properties:
        status:
          description: |
            The status to PATCH to an existing search job.  The only status values you can PATCH are 'canceled' and 'finalized'.  You can PATCH the 'canceled' status only to a search job that is running.
          enum:
          - canceled
          - finalized
          type: string
      required:
      - status
      type: object
    UpdateRecurringSearch:
      description: |
        Disable or update a recurring search job with a new query,  time range or interval.
      properties:
        enabled:
          default: true
          description: |
            Specifies whether this recurring search is enabled  (runs on the specified interval) or disabled.
          type: boolean
        interval:
          description: |
            The recurrence interval for the recurring search  specified with relative time specifier literals.
          enum:
          - 15m
          - 30m
          - 1h
          - 12h
          - 24h
          type: string
        name:
          description: The user defined name for this recurring search.
          type: string
        query:
          description: The query for the recurring search.
          type: string
        queryParameters:
          allOf:
          - $ref: '#/components/schemas/QueryParameters'
          description: |
            Represents parameters on the search job such as 'earliest'.  By default, the 'earliest' parameter is set based on the  recurrence interval. For example, if the interval is set  to '1h', the default value for 'earliest' is set to '-1h'  by the platform. The 'latest' and 'relativeTimeAnchor'  parameters are reserved. The readonly fields for recurring  searches and their values are determined by the platform.
      type: object
    listPreviewResultsResponse:
      description: |
        The structure of the preview search results that is returned  for the job with the specified search ID (sid). When a search is running,  it might return incomplete or truncated search results. The 'isPreviewStable'  property indicates whether the returned preview results stucture is stable or not. Truncated preview results occur because the number of requested results  exceeds the page limit. Follow the 'nextLink' URL to retrieve the next page of results.
      properties:
        fields:
          items:
            properties:
              dataSource:
                type: string
              groupbyRank:
                type: string
              name:
                type: string
              splitField:
                type: string
              splitValue:
                type: string
              splitbySpecial:
                type: string
              typeSpecial:
                type: string
            required:
            - name
            type: object
          type: array
        isPreviewStable:
          type: boolean
        messages:
          items:
            $ref: '#/components/schemas/Message'
          type: array
        nextLink:
          type: string
        results:
          items:
            type: object
          type: array
        wait:
          type: string
      required:
      - results
      - isPreviewStable
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
info:
  description: Use the Search service in Splunk Cloud Services to dispatch, review,
    and manage searches and search jobs. You can finalize or cancel jobs, retrieve
    search results, and request search-related configurations from the Metadata Catalog
    service in Splunk Cloud Services.
  title: Splunk Search service
  version: v3alpha1
openapi: 3.0.0
paths:
  /{tenant}/search/v3alpha1/jobs:
    get:
      description: Return the matching list of search jobs.
      operationId: listJobs
      parameters:
      - $ref: '#/components/parameters/StatusCount'
      - $ref: '#/components/parameters/StatusFilter'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SearchJob'
                type: array
          description: |
            The list of search jobs that match your filter  has been returned.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "500":
          description: An internal service error occurred.
    parameters:
    - $ref: '#/components/parameters/tenant'
    - $ref: '#/components/parameters/AuthorizationHeader'
    post:
      description: Creates a search job.
      operationId: createJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchJob'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchJob'
          description: The search job was created.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "412":
          description: The precondition for the request was not met.
        "429":
          description: Too many requests.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/jobs/{sid}:
    get:
      description: Return the search job with the specified search ID (sid).
      operationId: getJob
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchJob'
          description: |
            The search job information for the specified  search ID (sid) was returned.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: Invalid sid for getting the search job status or results.
        "500":
          description: An internal service error occurred.
    parameters:
    - $ref: '#/components/parameters/AuthorizationHeader'
    - $ref: '#/components/parameters/tenant'
    - $ref: '#/components/parameters/sid'
    patch:
      description: |
        Update the search job with the specified  search ID (sid) with an action.
      operationId: updateJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJob'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchJob'
          description: The action was applied to the search job.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/jobs/{sid}/results:
    get:
      description: |
        Return the search results for the job with the  specified search ID (sid).
      operationId: listResults
      parameters:
      - $ref: '#/components/parameters/tenant'
      - $ref: '#/components/parameters/sid'
      - $ref: '#/components/parameters/count'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/Field'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSearchResultsResponse'
          description: |
            The request for search results has completed.  Any results that are ready have been returned.  If there are additional results, a 'nextLink' URL is provided.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: Invalid sid for getting the search job status or results.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/jobs/{sid}/results-preview:
    get:
      description: |
        Return the preview search results for the job with the  specified search ID (sid). Can be used when a job is running to  return interim results.
      operationId: listPreviewResults
      parameters:
      - $ref: '#/components/parameters/tenant'
      - $ref: '#/components/parameters/sid'
      - $ref: '#/components/parameters/count'
      - $ref: '#/components/parameters/offset'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPreviewResultsResponse'
          description: |
            Preview search results, if ready, have been returned.  If there are additional results, a 'nextLink' URL is provided.
        "204":
          description: The preview search results are not ready.
        "400":
          description: The request is invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: |
            Either an invalid sid (search ID) for the search job status,  or preview search results is disabled.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/jobs/{sid}/timeline-metadata/auto/events-summary:
    get:
      description: |
        Return the events summary for the job with  specified search ID (sid).
      operationId: listEventsSummary
      parameters:
      - $ref: '#/components/parameters/tenant'
      - $ref: '#/components/parameters/sid'
      - $ref: '#/components/parameters/count'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/Field'
      - $ref: '#/components/parameters/Earliest'
      - $ref: '#/components/parameters/Latest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSearchResultsResponse'
          description: The request for events summary has completed.
        "204":
          description: The content was not ready.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: Invalid sid for getting the search job status or results.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/jobs/{sid}/timeline-metadata/auto/fields-summary:
    get:
      description: |
        Return the fields stats summary of the events to-date  for job with the specified search ID (sid).
      operationId: listFieldsSummary
      parameters:
      - $ref: '#/components/parameters/tenant'
      - $ref: '#/components/parameters/sid'
      - $ref: '#/components/parameters/Earliest'
      - $ref: '#/components/parameters/Latest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldsSummary'
          description: The request for fields summary has completed.
        "204":
          description: The content was not ready.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: Invalid sid for getting the search job status or results.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/jobs/{sid}/timeline-metadata/auto/time-buckets:
    get:
      description: |
        Return an event distribution over time of the untransformed  events read to-date for job with the specified search ID (sid).
      operationId: listTimeBuckets
      parameters:
      - $ref: '#/components/parameters/tenant'
      - $ref: '#/components/parameters/sid'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeBucketsSummary'
          description: The request for timeline buckets summary has completed.
        "204":
          description: The content was not ready.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: Invalid sid for getting the search job status or results.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/recurring-searches:
    get:
      description: Return the matching list of all recurring searches.
      operationId: listRecurringSearches
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RecurringSearch'
                type: array
          description: The list of recurring searches.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "500":
          description: An internal service error occurred.
    parameters:
    - $ref: '#/components/parameters/tenant'
    - $ref: '#/components/parameters/AuthorizationHeader'
    post:
      description: Creates a recurring search job.
      operationId: createRecurringSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringSearch'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringSearch'
          description: The recurring search was created successfully.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "412":
          description: The precondition for the request was not met.
        "429":
          description: Too many requests.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/recurring-searches/{rsid}:
    delete:
      description: |
        Delete the recurring search with the  specified recurring search ID (rsid).
      operationId: deleteRecurringSearch
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringSearch'
          description: |
            The recurring search for the specified  recurring search ID (rsid) was deleted.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: Invalid rsid for deleting the recurring search.
        "500":
          description: An internal service error occurred.
    get:
      description: |
        Return the recurring search with the specified  recurring search ID (rsid).
      operationId: getRecurringSearch
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringSearch'
          description: |
            The search job information for the specified  recurring search ID (rsid) was returned.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: Invalid RSID for getting the recurring search.
        "500":
          description: An internal service error occurred.
    parameters:
    - $ref: '#/components/parameters/AuthorizationHeader'
    - $ref: '#/components/parameters/tenant'
    - $ref: '#/components/parameters/rsid'
    patch:
      description: |
        Update the recurring search with the specified  recurring search ID (rsid).
      operationId: updateRecurringSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecurringSearch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringSearch'
          description: The update was applied to the recurring search job.
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "500":
          description: An internal service error occurred.
  /{tenant}/search/v3alpha1/recurring-searches/{rsid}/jobs:
    get:
      description: |
        Return all search jobs associated with this  recurring search with the specified recurring search ID (rsid).
      operationId: getAllJobsForRecurringSearch
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SearchJob'
                type: array
          description: |
            The search jobs associated with the recurring search  with the recurring search ID (rsid).
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: |
            Invalid rsid for getting the search jobs  associated with the recurring search.
        "500":
          description: An internal service error occurred.
    parameters:
    - $ref: '#/components/parameters/AuthorizationHeader'
    - $ref: '#/components/parameters/count'
    - $ref: '#/components/parameters/tenant'
    - $ref: '#/components/parameters/rsid'
  /{tenant}/search/v3alpha1/recurring-searches/{rsid}/most-recent:
    get:
      description: |
        Return the most recent search job associated with this  recurring search with the specified recurring search ID (rsid).
      operationId: getJobForRecurringSearch
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchJob'
          description: |
            The search job information for the most recent job run  associated with the recurring search with the recurring search  ID (rsid).
        "400":
          description: The request was invalid.
        "401":
          description: The request requires authentication.
        "403":
          description: The request was not authorized.
        "404":
          description: |
            Invalid rsid for getting the search job status  associated with the recurring search.
        "500":
          description: An internal service error occurred.
    parameters:
    - $ref: '#/components/parameters/AuthorizationHeader'
    - $ref: '#/components/parameters/tenant'
    - $ref: '#/components/parameters/rsid'

# Retrieved from scp-openapi commit 49538c89ff873a85da1e25cbb918db5edfca548a path: search/v3alpha1/openapi.yaml