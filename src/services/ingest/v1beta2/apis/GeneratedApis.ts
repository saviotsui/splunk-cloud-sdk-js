// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Ingest API
 * Use the Ingest service in Splunk Cloud Services to send event and metrics data, or upload a static file, to Splunk Cloud Services.
 *
 * OpenAPI spec version: v1beta2.9 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {
    Event,
    HTTPResponse,
    MetricEvent,
} from '../models';
import BaseApiService from "../../../../baseapiservice";
import { IngestServiceExtensions } from "../../../../service_extensions/ingest";
import { SplunkError } from '../../../../client';

export const INGEST_SERVICE_PREFIX: string = '/ingest/v1beta2';
export const INGEST_SERVICE_CLUSTER: string = 'api';

/**
 * Ingest API
 * Version: v1beta2.9
 * Use the Ingest service in Splunk Cloud Services to send event and metrics data, or upload a static file, to Splunk Cloud Services.
 */
export class GeneratedIngestService extends BaseApiService {
    getServiceCluster() : string {
        return INGEST_SERVICE_CLUSTER
    }

    getServicePrefix() : string {
        return INGEST_SERVICE_PREFIX;
    }
    /**
     * Sends events.
     * @param event
     * @param args parameters to be sent with the request
     * @return HTTPResponse
     */
    public postEvents = (event?: Array<Event>, args?: object): Promise<HTTPResponse> => {
        if (!event) {
            throw new SplunkError({ message: `Bad Request: event is empty or undefined` });
        }
        const path = `/ingest/v1beta2/events`;
        return this.client.post(INGEST_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), event, { query: args })
            .then(response => response.body as HTTPResponse);
    }
    /**
     * Sends metric events.
     * @param metricEvent
     * @param args parameters to be sent with the request
     * @return HTTPResponse
     */
    public postMetrics = (metricEvent?: Array<MetricEvent>, args?: object): Promise<HTTPResponse> => {
        if (!metricEvent) {
            throw new SplunkError({ message: `Bad Request: metricEvent is empty or undefined` });
        }
        const path = `/ingest/v1beta2/metrics`;
        return this.client.post(INGEST_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), metricEvent, { query: args })
            .then(response => response.body as HTTPResponse);
    }
}
export type IngestService = GeneratedIngestService & IngestServiceExtensions;
export const IngestService = IngestServiceExtensions(GeneratedIngestService);
