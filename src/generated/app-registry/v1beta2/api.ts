// tslint:disable
/**
 * Copyright 2019 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * App Registry
 * With the Splunk Cloud App Registry service, you can create, update, and manage apps built with Splunk Developer Cloud.
 *
 * OpenAPI spec version: v1beta2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import BaseApiService from '../../../baseapiservice';
import {
    AppName,
    AppResourceKind,
    AppResponseCreateUpdate,
    AppResponseGetList,
    CreateAppRequest,
    Key,
    Subscription,
    UpdateAppRequest,
} from '../../../models/app-registry';
import { SplunkError } from '../../../client';

export const APPREGISTRY_SERVICE_PREFIX: string = '/app-registry/v1beta2';
export const APPREGISTRY_SERVICE_CLUSTER: string = 'api';

/**
 * App Registry
 * Version: v1beta2.0
 * With the Splunk Cloud App Registry service, you can create, update, and manage apps built with Splunk Developer Cloud.
 */
export abstract class AppRegistryServiceGen extends BaseApiService {
    /**
     * Creates an app.
     * @param createAppRequest Creates a new app.
     * @return AppResponseCreateUpdate
     */
    public createApp = (createAppRequest: CreateAppRequest): Promise<AppResponseCreateUpdate> => {
        const path = `/app-registry/v1beta2/apps`;
        return this.client.post(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), createAppRequest)
            .then(response => response.body as AppResponseCreateUpdate);
    }
    /**
     * Creates a subscription.
     * @param appName Creates a subscription between a tenant and an app.
     */
    public createSubscription = (appName: AppName): Promise<object> => {
        const path = `/app-registry/v1beta2/subscriptions`;
        return this.client.post(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), appName)
            .then(response => response.body as object);
    }
    /**
     * Removes an app.
     * @param appName App name.
     */
    public deleteApp = (appName: string): Promise<object> => {
        const path_params = {
            appName: appName
        };
        const path = this.template`/app-registry/v1beta2/apps/${'appName'}`(path_params);
        return this.client.delete(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)))
            .then(response => response.body as object);
    }
    /**
     * Removes a subscription.
     * @param appName App name.
     */
    public deleteSubscription = (appName: string): Promise<object> => {
        const path_params = {
            appName: appName
        };
        const path = this.template`/app-registry/v1beta2/subscriptions/${'appName'}`(path_params);
        return this.client.delete(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)))
            .then(response => response.body as object);
    }
    /**
     * Returns the metadata of an app.
     * @param appName App name.
     * @return AppResponseGetList
     */
    public getApp = (appName: string): Promise<AppResponseGetList> => {
        const path_params = {
            appName: appName
        };
        const path = this.template`/app-registry/v1beta2/apps/${'appName'}`(path_params);
        return this.client.get(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)))
            .then(response => response.body as AppResponseGetList);
    }
    /**
     * Returns a list of the public keys used for verifying signed webhook requests.
     * @return Array<Key>
     */
    public getKeys = (): Promise<Array<Key>> => {
        const path = `/system/app-registry/v1beta2/keys`;
        return this.client.get(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)))
            .then(response => response.body as Array<Key>);
    }
    /**
     * Returns or validates a subscription.
     * @param appName App name.
     * @return Subscription
     */
    public getSubscription = (appName: string): Promise<Subscription> => {
        const path_params = {
            appName: appName
        };
        const path = this.template`/app-registry/v1beta2/subscriptions/${'appName'}`(path_params);
        return this.client.get(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)))
            .then(response => response.body as Subscription);
    }
    /**
     * Returns the collection of subscriptions to an app.
     * @param appName App name.
     * @return Array<Subscription>
     */
    public listAppSubscriptions = (appName: string): Promise<Array<Subscription>> => {
        const path_params = {
            appName: appName
        };
        const path = this.template`/app-registry/v1beta2/apps/${'appName'}/subscriptions`(path_params);
        return this.client.get(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)))
            .then(response => response.body as Array<Subscription>);
    }
    /**
     * Returns a list of apps.
     * @return Array<AppResponseGetList>
     */
    public listApps = (): Promise<Array<AppResponseGetList>> => {
        const path = `/app-registry/v1beta2/apps`;
        return this.client.get(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)))
            .then(response => response.body as Array<AppResponseGetList>);
    }
    /**
     * Returns the tenant subscriptions.
     * @param args All other arguments.
     * @param args.kind The kind of application. 
     * @return Array<Subscription>
     */
    public listSubscriptions = (args?: { kind?: AppResourceKind }): Promise<Array<Subscription>> => {
        const path = `/app-registry/v1beta2/subscriptions`;
        return this.client.get(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: args })
            .then(response => response.body as Array<Subscription>);
    }
    /**
     * Rotates the client secret for an app.
     * @param appName App name.
     * @return AppResponseCreateUpdate
     */
    public rotateSecret = (appName: string): Promise<AppResponseCreateUpdate> => {
        const path_params = {
            appName: appName
        };
        const path = this.template`/app-registry/v1beta2/apps/${'appName'}/rotate-secret`(path_params);
        return this.client.post(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)))
            .then(response => response.body as AppResponseCreateUpdate);
    }
    /**
     * Updates an app.
     * @param appName App name.
     * @param updateAppRequest Updates app contents.
     * @return AppResponseCreateUpdate
     */
    public updateApp = (appName: string, updateAppRequest: UpdateAppRequest): Promise<AppResponseCreateUpdate> => {
        const path_params = {
            appName: appName
        };
        const path = this.template`/app-registry/v1beta2/apps/${'appName'}`(path_params);
        return this.client.put(APPREGISTRY_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), updateAppRequest)
            .then(response => response.body as AppResponseCreateUpdate);
    }
}
