// tslint:disable
/**
 * Copyright 2019 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Metadata Catalog
 * With the Metadata Catalog you can create and manage knowledge objects such as datasets, fields, rules, actions, dashboards, and workflows.
 *
 * OpenAPI spec version: v2beta1.4 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import BaseApiService from '../../../baseapiservice';
import {
    Action,
    ActionPATCH,
    ActionPOST,
    Annotation,
    Dashboard,
    DashboardPATCH,
    DashboardPOST,
    Dataset,
    DatasetImportedBy,
    DatasetPATCH,
    DatasetPOST,
    Field,
    FieldPATCH,
    FieldPOST,
    ImportDataset,
    Module,
    Relationship,
    RelationshipPATCH,
    RelationshipPOST,
    Rule,
    RulePATCH,
    RulePOST,
    Workflow,
    WorkflowBuild,
    WorkflowBuildPATCH,
    WorkflowBuildPOST,
    WorkflowPATCH,
    WorkflowPOST,
    WorkflowRun,
    WorkflowRunPATCH,
    WorkflowRunPOST,
} from '../../../models/catalog';
import { SplunkError } from '../../../client';

export const CATALOG_SERVICE_PREFIX: string = '/catalog/v2beta1';
export const CATALOG_SERVICE_CLUSTER: string = 'api';

/**
 * Metadata Catalog
 * Version: v2beta1.4
 * With the Metadata Catalog you can create and manage knowledge objects such as datasets, fields, rules, actions, dashboards, and workflows.
 */
export abstract class CatalogServiceGen extends BaseApiService {
    /**
     * Create a new action for a rule associated with a specific resource name.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionPOST The JSON representation of the action to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Action
     */
    public createActionForRule = (ruleresourcename: string, actionPOST: ActionPOST, queryParams?: object): Promise<Action> => {
        const path_params = {
            ruleresourcename: ruleresourcename
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleresourcename'}/actions`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), actionPOST, { query: queryParams })
            .then(response => response.body as Action);
    }
    /**
     * Create a new action for a specific rule.
     * @param ruleid ID of a Field.
     * @param actionPOST The JSON representation of the action to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Action
     */
    public createActionForRuleById = (ruleid: string, actionPOST: ActionPOST, queryParams?: object): Promise<Action> => {
        const path_params = {
            ruleid: ruleid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleid'}/actions`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), actionPOST, { query: queryParams })
            .then(response => response.body as Action);
    }
    /**
     * Create a new annotation for a specific dashboard.
     * @param dashboardid ID of a dashboard.
     * @param requestBody The JSON representation of the annotation to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Annotation
     */
    public createAnnotationForDashboardbyId = (dashboardid: string, requestBody: { [key: string]: string; }, queryParams?: object): Promise<Annotation> => {
        const path_params = {
            dashboardid: dashboardid
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardid'}/annotations`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), requestBody, { query: queryParams })
            .then(response => response.body as Annotation);
    }
    /**
     * Create a new annotation for a specific dataset.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param requestBody The JSON representation of the annotation to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Annotation
     */
    public createAnnotationForDashboardsByResourceName = (dashboardresourcename: string, requestBody: { [key: string]: string; }, queryParams?: object): Promise<Annotation> => {
        const path_params = {
            dashboardresourcename: dashboardresourcename
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardresourcename'}/annotations`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), requestBody, { query: queryParams })
            .then(response => response.body as Annotation);
    }
    /**
     * Create a new annotation for a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param requestBody The JSON representation of the annotation to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Annotation
     */
    public createAnnotationForDatasetById = (datasetid: string, requestBody: { [key: string]: string; }, queryParams?: object): Promise<Annotation> => {
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/annotations`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), requestBody, { query: queryParams })
            .then(response => response.body as Annotation);
    }
    /**
     * Create a new annotation for a specific dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param requestBody The JSON representation of the annotation to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Annotation
     */
    public createAnnotationForDatasetByResourceName = (datasetresourcename: string, requestBody: { [key: string]: string; }, queryParams?: object): Promise<Annotation> => {
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/annotations`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), requestBody, { query: queryParams })
            .then(response => response.body as Annotation);
    }
    /**
     * Create a new dashboard.
     * @param dashboardPOST The JSON representation of the Dashboard to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Dashboard
     */
    public createDashboard = (dashboardPOST: DashboardPOST, queryParams?: object): Promise<Dashboard> => {
        const path = `/catalog/v2beta1/dashboards`;
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), dashboardPOST, { query: queryParams })
            .then(response => response.body as Dashboard);
    }
    /**
     * Create a new dataset.
     * @param datasetPOST JSON representation of the DatasetInfo to be persisted
     * @param queryParams Query parameters to be sent with the request
     * @return Dataset
     */
    public createDataset = (datasetPOST: DatasetPOST, queryParams?: object): Promise<Dataset> => {
        const path = `/catalog/v2beta1/datasets`;
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), datasetPOST, { query: queryParams })
            .then(response => response.body as Dataset);
    }
    /**
     * Create a new dataset import.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetImportedBy
     * @param queryParams Query parameters to be sent with the request
     * @return ImportDataset
     */
    public createDatasetImport = (datasetresourcename: string, datasetImportedBy?: DatasetImportedBy, queryParams?: object): Promise<ImportDataset> => {
        if (!datasetImportedBy) {
            throw new SplunkError({ message: `Bad Request: datasetImportedBy is empty or undefined` });
        }
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/imported-by`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: queryParams })
            .then(response => response.body as ImportDataset);
    }
    /**
     * Create a new dataset import.
     * @param datasetid ID of a Dataset.
     * @param datasetImportedBy
     * @param queryParams Query parameters to be sent with the request
     * @return ImportDataset
     */
    public createDatasetImportById = (datasetid: string, datasetImportedBy?: DatasetImportedBy, queryParams?: object): Promise<ImportDataset> => {
        if (!datasetImportedBy) {
            throw new SplunkError({ message: `Bad Request: datasetImportedBy is empty or undefined` });
        }
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/imported-by`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: queryParams })
            .then(response => response.body as ImportDataset);
    }
    /**
     * Create a new dataset import.
     * @param datasetid ID of a Dataset.
     * @param datasetImportedBy
     * @param queryParams Query parameters to be sent with the request
     * @return DatasetImportedBy
     */
    public createDatasetImportByIdv1 = (datasetid: string, datasetImportedBy?: DatasetImportedBy, queryParams?: object): Promise<DatasetImportedBy> => {
        if (!datasetImportedBy) {
            throw new SplunkError({ message: `Bad Request: datasetImportedBy is empty or undefined` });
        }
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/importedby`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: queryParams })
            .then(response => response.body as DatasetImportedBy);
    }
    /**
     * Create a new dataset import.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetImportedBy
     * @param queryParams Query parameters to be sent with the request
     * @return Dataset
     */
    public createDatasetImportv1 = (datasetresourcename: string, datasetImportedBy?: DatasetImportedBy, queryParams?: object): Promise<Dataset> => {
        if (!datasetImportedBy) {
            throw new SplunkError({ message: `Bad Request: datasetImportedBy is empty or undefined` });
        }
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/importedby`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: queryParams })
            .then(response => response.body as Dataset);
    }
    /**
     * Create a new field on a specific dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldPOST The JSON representation of the field to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Field
     */
    public createFieldForDataset = (datasetresourcename: string, fieldPOST: FieldPOST, queryParams?: object): Promise<Field> => {
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/fields`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), fieldPOST, { query: queryParams })
            .then(response => response.body as Field);
    }
    /**
     * Add a new field to a dataset.
     * @param datasetid ID of a Dataset.
     * @param fieldPOST The JSON representation of the field to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Field
     */
    public createFieldForDatasetById = (datasetid: string, fieldPOST: FieldPOST, queryParams?: object): Promise<Field> => {
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/fields`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), fieldPOST, { query: queryParams })
            .then(response => response.body as Field);
    }
    /**
     * Create a new relationship.
     * @param relationshipPOST The JSON representation of the relationship to persist.
     * @param queryParams Query parameters to be sent with the request
     * @return Relationship
     */
    public createRelationship = (relationshipPOST: RelationshipPOST, queryParams?: object): Promise<Relationship> => {
        const path = `/catalog/v2beta1/relationships`;
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), relationshipPOST, { query: queryParams })
            .then(response => response.body as Relationship);
    }
    /**
     * Create a new rule.
     * @param rulePOST The JSON representation of the rule to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Rule
     */
    public createRule = (rulePOST: RulePOST, queryParams?: object): Promise<Rule> => {
        const path = `/catalog/v2beta1/rules`;
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), rulePOST, { query: queryParams })
            .then(response => response.body as Rule);
    }
    /**
     * Create a new workflow configuration.
     * @param workflowPOST The JSON representation of the workflow to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Workflow
     */
    public createWorkflow = (workflowPOST: WorkflowPOST, queryParams?: object): Promise<Workflow> => {
        const path = `/catalog/v2beta1/workflows`;
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), workflowPOST, { query: queryParams })
            .then(response => response.body as Workflow);
    }
    /**
     * Create a new workflow build.
     * @param workflowid ID of a workflow.
     * @param workflowBuildPOST The JSON representation of the workflow build to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return WorkflowBuild
     */
    public createWorkflowBuild = (workflowid: string, workflowBuildPOST: WorkflowBuildPOST, queryParams?: object): Promise<WorkflowBuild> => {
        const path_params = {
            workflowid: workflowid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), workflowBuildPOST, { query: queryParams })
            .then(response => response.body as WorkflowBuild);
    }
    /**
     * Create a new workflow run for the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowRunPOST The JSON representation of the workflow run to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return WorkflowRun
     */
    public createWorkflowRun = (workflowid: string, workflowbuildid: string, workflowRunPOST: WorkflowRunPOST, queryParams?: object): Promise<WorkflowRun> => {
        const path_params = {
            workflowid: workflowid,
            workflowbuildid: workflowbuildid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds/${'workflowbuildid'}/runs`(path_params);
        return this.client.post(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), workflowRunPOST, { query: queryParams })
            .then(response => response.body as WorkflowRun);
    }
    /**
     * Delete an action on a rule.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteActionByIdForRule = (ruleresourcename: string, actionid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            ruleresourcename: ruleresourcename,
            actionid: actionid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleresourcename'}/actions/${'actionid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete an action that is part of a specific rule.
     * @param ruleid ID of a Field.
     * @param actionid ID of an Action.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteActionByIdForRuleById = (ruleid: string, actionid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            ruleid: ruleid,
            actionid: actionid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleid'}/actions/${'actionid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a specific annotation of a dashboard.
     * @param dashboardid ID of a dashboard.
     * @param annotationid ID of a annotation.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteAnnotationOfDashboardById = (dashboardid: string, annotationid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            dashboardid: dashboardid,
            annotationid: annotationid
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardid'}/annotations/${'annotationid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a specific annotation of a dashboard.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param annotationid ID of a annotation.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteAnnotationOfDashboardByResourceName = (dashboardresourcename: string, annotationid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            dashboardresourcename: dashboardresourcename,
            annotationid: annotationid
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardresourcename'}/annotations/${'annotationid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a specific annotation of a dataset.
     * @param datasetid ID of a Dataset.
     * @param annotationid ID of a annotation.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteAnnotationOfDatasetById = (datasetid: string, annotationid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            datasetid: datasetid,
            annotationid: annotationid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/annotations/${'annotationid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a specific annotation of a dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param annotationid ID of a annotation.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteAnnotationOfDatasetByResourceName = (datasetresourcename: string, annotationid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            datasetresourcename: datasetresourcename,
            annotationid: annotationid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/annotations/${'annotationid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete the dashboard with the specified ID.
     * @param dashboardid ID of a dashboard.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteDashboardById = (dashboardid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            dashboardid: dashboardid
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete the dashboard with the specified resource name.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteDashboardByResourceName = (dashboardresourcename: string, queryParams?: object): Promise<object> => {
        const path_params = {
            dashboardresourcename: dashboardresourcename
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardresourcename'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete the dataset with the specified resource name, along with its dependencies. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteDataset = (datasetresourcename: string, queryParams?: object): Promise<object> => {
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a specific dataset. Deleting a dataset also deletes its dependent objects, such as fields.
     * @param datasetid ID of a Dataset.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteDatasetById = (datasetid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a field that is part of a specific dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteFieldByIdForDataset = (datasetresourcename: string, fieldid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            datasetresourcename: datasetresourcename,
            fieldid: fieldid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/fields/${'fieldid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a field that is part of a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param fieldid ID of a Field.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteFieldByIdForDatasetById = (datasetid: string, fieldid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            datasetid: datasetid,
            fieldid: fieldid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/fields/${'fieldid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a specific relationship. Deleting a relationship also deleletes any objects that are dependents of that relationship, such as relationship fields.
     * @param relationshipid ID of a relationship.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteRelationshipById = (relationshipid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            relationshipid: relationshipid
        };
        const path = this.template`/catalog/v2beta1/relationships/${'relationshipid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete the rule with the specified resource name and its dependencies.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteRule = (ruleresourcename: string, queryParams?: object): Promise<object> => {
        const path_params = {
            ruleresourcename: ruleresourcename
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleresourcename'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete a specific rule. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
     * @param ruleid ID of a Field.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteRuleById = (ruleid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            ruleid: ruleid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete the workflow build with the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteWorkflowBuildById = (workflowid: string, workflowbuildid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            workflowid: workflowid,
            workflowbuildid: workflowbuildid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds/${'workflowbuildid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete the workflow with the specified workflow ID.
     * @param workflowid ID of a workflow.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteWorkflowById = (workflowid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            workflowid: workflowid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Delete the workflow run with the specified workflow run ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowrunid ID of a workflow run.
     * @param queryParams Query parameters to be sent with the request
     */
    public deleteWorkflowRunById = (workflowid: string, workflowbuildid: string, workflowrunid: string, queryParams?: object): Promise<object> => {
        const path_params = {
            workflowid: workflowid,
            workflowbuildid: workflowbuildid,
            workflowrunid: workflowrunid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds/${'workflowbuildid'}/runs/${'workflowrunid'}`(path_params);
        return this.client.delete(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Return an action that is part of a specified rule.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param queryParams Query parameters to be sent with the request
     * @return Action
     */
    public getActionByIdForRule = (ruleresourcename: string, actionid: string, queryParams?: object): Promise<Action> => {
        const path_params = {
            ruleresourcename: ruleresourcename,
            actionid: actionid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleresourcename'}/actions/${'actionid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Action);
    }
    /**
     * Return information about an action that is part of a specific rule.
     * @param ruleid ID of a Field.
     * @param actionid ID of an Action.
     * @param queryParams Query parameters to be sent with the request
     * @return Action
     */
    public getActionByIdForRuleById = (ruleid: string, actionid: string, queryParams?: object): Promise<Action> => {
        const path_params = {
            ruleid: ruleid,
            actionid: actionid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleid'}/actions/${'actionid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Action);
    }
    /**
     * Return information about a dashboard with the specified ID.
     * @param dashboardid ID of a dashboard.
     * @param queryParams Query parameters to be sent with the request
     * @return Dashboard
     */
    public getDashboardById = (dashboardid: string, queryParams?: object): Promise<Dashboard> => {
        const path_params = {
            dashboardid: dashboardid
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Dashboard);
    }
    /**
     * Return information about a dashboard with the specified resource name.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param queryParams Query parameters to be sent with the request
     * @return Dashboard
     */
    public getDashboardByResourceName = (dashboardresourcename: string, queryParams?: object): Promise<Dashboard> => {
        const path_params = {
            dashboardresourcename: dashboardresourcename
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardresourcename'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Dashboard);
    }
    /**
     * Return the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param queryParams Query parameters to be sent with the request
     * @return Dataset
     */
    public getDataset = (datasetresourcename: string, queryParams?: object): Promise<Dataset> => {
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Dataset);
    }
    /**
     * Return information about the dataset with the specified ID.
     * @param datasetid ID of a Dataset.
     * @param queryParams Query parameters to be sent with the request
     * @return Dataset
     */
    public getDatasetById = (datasetid: string, queryParams?: object): Promise<Dataset> => {
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Dataset);
    }
    /**
     * Get a field that corresponds to a specific field ID.
     * @param fieldid ID of a Field.
     * @param queryParams Query parameters to be sent with the request
     * @return Field
     */
    public getFieldById = (fieldid: string, queryParams?: object): Promise<Field> => {
        const path_params = {
            fieldid: fieldid
        };
        const path = this.template`/catalog/v2beta1/fields/${'fieldid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Field);
    }
    /**
     * Return a field that is part of a specific dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param queryParams Query parameters to be sent with the request
     * @return Field
     */
    public getFieldByIdForDataset = (datasetresourcename: string, fieldid: string, queryParams?: object): Promise<Field> => {
        const path_params = {
            datasetresourcename: datasetresourcename,
            fieldid: fieldid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/fields/${'fieldid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Field);
    }
    /**
     * Return a field that is part of a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param fieldid ID of a Field.
     * @param queryParams Query parameters to be sent with the request
     * @return Field
     */
    public getFieldByIdForDatasetById = (datasetid: string, fieldid: string, queryParams?: object): Promise<Field> => {
        const path_params = {
            datasetid: datasetid,
            fieldid: fieldid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/fields/${'fieldid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Field);
    }
    /**
     * Get a specific relationship.
     * @param relationshipid ID of a relationship.
     * @param queryParams Query parameters to be sent with the request
     * @return Relationship
     */
    public getRelationshipById = (relationshipid: string, queryParams?: object): Promise<Relationship> => {
        const path_params = {
            relationshipid: relationshipid
        };
        const path = this.template`/catalog/v2beta1/relationships/${'relationshipid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Relationship);
    }
    /**
     * Get a rule with a specified resource name.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param queryParams Query parameters to be sent with the request
     * @return Rule
     */
    public getRule = (ruleresourcename: string, queryParams?: object): Promise<Rule> => {
        const path_params = {
            ruleresourcename: ruleresourcename
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleresourcename'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Rule);
    }
    /**
     * Get information about a specific rule.
     * @param ruleid ID of a Field.
     * @param queryParams Query parameters to be sent with the request
     * @return Rule
     */
    public getRuleById = (ruleid: string, queryParams?: object): Promise<Rule> => {
        const path_params = {
            ruleid: ruleid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Rule);
    }
    /**
     * Return information about the workflow build with the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param queryParams Query parameters to be sent with the request
     * @return WorkflowBuild
     */
    public getWorkflowBuildById = (workflowid: string, workflowbuildid: string, queryParams?: object): Promise<WorkflowBuild> => {
        const path_params = {
            workflowid: workflowid,
            workflowbuildid: workflowbuildid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds/${'workflowbuildid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as WorkflowBuild);
    }
    /**
     * Return information about a workflow with the specified workflow ID.
     * @param workflowid ID of a workflow.
     * @param queryParams Query parameters to be sent with the request
     * @return Workflow
     */
    public getWorkflowById = (workflowid: string, queryParams?: object): Promise<Workflow> => {
        const path_params = {
            workflowid: workflowid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Workflow);
    }
    /**
     * Return information about the workflow run with the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowrunid ID of a workflow run.
     * @param queryParams Query parameters to be sent with the request
     * @return WorkflowRun
     */
    public getWorkflowRunById = (workflowid: string, workflowbuildid: string, workflowrunid: string, queryParams?: object): Promise<WorkflowRun> => {
        const path_params = {
            workflowid: workflowid,
            workflowbuildid: workflowbuildid,
            workflowrunid: workflowrunid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds/${'workflowbuildid'}/runs/${'workflowrunid'}`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as WorkflowRun);
    }
    /**
     * Return the list of actions that are part of a specified rule.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Action>
     */
    public listActionsForRule = (ruleresourcename: string, queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Action>> => {
        const path_params = {
            ruleresourcename: ruleresourcename
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleresourcename'}/actions`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Action>);
    }
    /**
     * Return the set of actions that are part of a rule.
     * @param ruleid ID of a Field.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Action>
     */
    public listActionsForRuleById = (ruleid: string, queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Action>> => {
        const path_params = {
            ruleid: ruleid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleid'}/actions`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Action>);
    }
    /**
     * Return the set of annotations that are part of a dashboard.
     * @param dashboardid ID of a dashboard.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.filter A filter query to apply to the annotations.
     * @return Array<Annotation>
     */
    public listAnnotationsForDashboardById = (dashboardid: string, queryParams?: { filter?: string, [key: string]: any }): Promise<Array<Annotation>> => {
        const path_params = {
            dashboardid: dashboardid
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardid'}/annotations`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Annotation>);
    }
    /**
     * Return the set of annotations that are part of a dashboard.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.filter A filter query to apply to the annotations.
     * @return Array<Annotation>
     */
    public listAnnotationsForDashboardByResourceName = (dashboardresourcename: string, queryParams?: { filter?: string, [key: string]: any }): Promise<Array<Annotation>> => {
        const path_params = {
            dashboardresourcename: dashboardresourcename
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardresourcename'}/annotations`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Annotation>);
    }
    /**
     * Return the set of annotations that are part of a dataset.
     * @param datasetid ID of a Dataset.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Annotation>
     */
    public listAnnotationsForDatasetById = (datasetid: string, queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Annotation>> => {
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/annotations`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Annotation>);
    }
    /**
     * Return the set of annotations that are part of a dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Annotation>
     */
    public listAnnotationsForDatasetByResourceName = (datasetresourcename: string, queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Annotation>> => {
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/annotations`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Annotation>);
    }
    /**
     * Return a list of Dashboards.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Dashboard>
     */
    public listDashboards = (queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Dashboard>> => {
        const path = `/catalog/v2beta1/dashboards`;
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Dashboard>);
    }
    /**
     * Returns a list of all datasets, unless you specify a filter. Use a filter to return a specific list of datasets.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Dataset>
     */
    public listDatasets = (queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Dataset>> => {
        const path = `/catalog/v2beta1/datasets`;
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Dataset>);
    }
    /**
     * Get a list of all fields in the Catalog.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Field>
     */
    public listFields = (queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Field>> => {
        const path = `/catalog/v2beta1/fields`;
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Field>);
    }
    /**
     * Return the list of fields that are part of a specified dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Field>
     */
    public listFieldsForDataset = (datasetresourcename: string, queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Field>> => {
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/fields`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Field>);
    }
    /**
     * Return the set of fields for the specified dataset.
     * @param datasetid ID of a Dataset.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Field>
     */
    public listFieldsForDatasetById = (datasetid: string, queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Field>> => {
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/fields`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Field>);
    }
    /**
     * Return a list of all modules, unless you specify a filter. Use a filter to return a specific list of modules.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.filter A filter to apply to the modules.
     * @return Array<Module>
     */
    public listModules = (queryParams?: { filter?: string, [key: string]: any }): Promise<Array<Module>> => {
        const path = `/catalog/v2beta1/modules`;
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Module>);
    }
    /**
     * Returns a list of all relationships, unless you specify a filter. Use a filter to return a specific list of relationships.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Relationship>
     */
    public listRelationships = (queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Relationship>> => {
        const path = `/catalog/v2beta1/relationships`;
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Relationship>);
    }
    /**
     * Return a list of rules that match a filter query if it is given, otherwise return all rules.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Rule>
     */
    public listRules = (queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Rule>> => {
        const path = `/catalog/v2beta1/rules`;
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Rule>);
    }
    /**
     * Return a list of Machine Learning workflow builds.
     * @param workflowid ID of a workflow.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<WorkflowBuild>
     */
    public listWorkflowBuilds = (workflowid: string, queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<WorkflowBuild>> => {
        const path_params = {
            workflowid: workflowid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<WorkflowBuild>);
    }
    /**
     * Return a list of Machine Learning workflow runs for specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<WorkflowRun>
     */
    public listWorkflowRuns = (workflowid: string, workflowbuildid: string, queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<WorkflowRun>> => {
        const path_params = {
            workflowid: workflowid,
            workflowbuildid: workflowbuildid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds/${'workflowbuildid'}/runs`(path_params);
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<WorkflowRun>);
    }
    /**
     * Return a list of Machine Learning workflow configurations.
     * @param queryParams Query parameters to be sent with the request
     * @param queryParams.count The maximum number of results to return.
     * @param queryParams.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param queryParams.offset The number of results to skip before the first one returned.
     * @param queryParams.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @return Array<Workflow>
     */
    public listWorkflows = (queryParams?: { count?: number, filter?: string, offset?: number, orderby?: Array<string>, [key: string]: any }): Promise<Array<Workflow>> => {
        const path = `/catalog/v2beta1/workflows`;
        return this.client.get(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), { query: queryParams })
            .then(response => response.body as Array<Workflow>);
    }
    /**
     * Update the Action with the specified id for the specified Rule
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param actionPATCH The fields to update in the specified action.
     * @param queryParams Query parameters to be sent with the request
     * @return Action
     */
    public updateActionByIdForRule = (ruleresourcename: string, actionid: string, actionPATCH: ActionPATCH, queryParams?: object): Promise<Action> => {
        const path_params = {
            ruleresourcename: ruleresourcename,
            actionid: actionid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleresourcename'}/actions/${'actionid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), actionPATCH, { query: queryParams })
            .then(response => response.body as Action);
    }
    /**
     * Update an action for a specific rule.
     * @param ruleid ID of a Field.
     * @param actionid ID of an Action.
     * @param actionPATCH The properties to update in the specified action.
     * @param queryParams Query parameters to be sent with the request
     * @return Action
     */
    public updateActionByIdForRuleById = (ruleid: string, actionid: string, actionPATCH: ActionPATCH, queryParams?: object): Promise<Action> => {
        const path_params = {
            ruleid: ruleid,
            actionid: actionid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleid'}/actions/${'actionid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), actionPATCH, { query: queryParams })
            .then(response => response.body as Action);
    }
    /**
     * Update the dashboard with the specified ID.
     * @param dashboardid ID of a dashboard.
     * @param dashboardPATCH An updated representation of the dashboard to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Dashboard
     */
    public updateDashboardById = (dashboardid: string, dashboardPATCH: DashboardPATCH, queryParams?: object): Promise<Dashboard> => {
        const path_params = {
            dashboardid: dashboardid
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), dashboardPATCH, { query: queryParams })
            .then(response => response.body as Dashboard);
    }
    /**
     * Update the dashboard with the specified resource name.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param dashboardPATCH An updated representation of the dashboard to be persisted.
     * @param queryParams Query parameters to be sent with the request
     */
    public updateDashboardByResourceName = (dashboardresourcename: string, dashboardPATCH: DashboardPATCH, queryParams?: object): Promise<object> => {
        const path_params = {
            dashboardresourcename: dashboardresourcename
        };
        const path = this.template`/catalog/v2beta1/dashboards/${'dashboardresourcename'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), dashboardPATCH, { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetPATCH An updated representation of the dataset to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Dataset
     */
    public updateDataset = (datasetresourcename: string, datasetPATCH: DatasetPATCH, queryParams?: object): Promise<Dataset> => {
        const path_params = {
            datasetresourcename: datasetresourcename
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), datasetPATCH, { query: queryParams })
            .then(response => response.body as Dataset);
    }
    /**
     * Update a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param datasetPATCH An updated representation of the dataset to be persisted.
     * @param queryParams Query parameters to be sent with the request
     * @return Dataset
     */
    public updateDatasetById = (datasetid: string, datasetPATCH: DatasetPATCH, queryParams?: object): Promise<Dataset> => {
        const path_params = {
            datasetid: datasetid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), datasetPATCH, { query: queryParams })
            .then(response => response.body as Dataset);
    }
    /**
     * Update a field with a specified ID for a specified dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param fieldPATCH The properties to update in the specified field.
     * @param queryParams Query parameters to be sent with the request
     * @return Field
     */
    public updateFieldByIdForDataset = (datasetresourcename: string, fieldid: string, fieldPATCH: FieldPATCH, queryParams?: object): Promise<Field> => {
        const path_params = {
            datasetresourcename: datasetresourcename,
            fieldid: fieldid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetresourcename'}/fields/${'fieldid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), fieldPATCH, { query: queryParams })
            .then(response => response.body as Field);
    }
    /**
     * Update a field for a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param fieldid ID of a Field.
     * @param fieldPATCH The properties to update in the specified field.
     * @param queryParams Query parameters to be sent with the request
     * @return Field
     */
    public updateFieldByIdForDatasetById = (datasetid: string, fieldid: string, fieldPATCH: FieldPATCH, queryParams?: object): Promise<Field> => {
        const path_params = {
            datasetid: datasetid,
            fieldid: fieldid
        };
        const path = this.template`/catalog/v2beta1/datasets/${'datasetid'}/fields/${'fieldid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), fieldPATCH, { query: queryParams })
            .then(response => response.body as Field);
    }
    /**
     * Update a specific relationship.
     * @param relationshipid ID of a relationship.
     * @param relationshipPATCH The properties to update in the specified relationship.
     * @param queryParams Query parameters to be sent with the request
     * @return Relationship
     */
    public updateRelationshipById = (relationshipid: string, relationshipPATCH: RelationshipPATCH, queryParams?: object): Promise<Relationship> => {
        const path_params = {
            relationshipid: relationshipid
        };
        const path = this.template`/catalog/v2beta1/relationships/${'relationshipid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), relationshipPATCH, { query: queryParams })
            .then(response => response.body as Relationship);
    }
    /**
     * Update the Rule with the specified resourcename
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param rulePATCH The properties to update in the specified rule.
     * @param queryParams Query parameters to be sent with the request
     * @return Rule
     */
    public updateRule = (ruleresourcename: string, rulePATCH: RulePATCH, queryParams?: object): Promise<Rule> => {
        const path_params = {
            ruleresourcename: ruleresourcename
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleresourcename'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), rulePATCH, { query: queryParams })
            .then(response => response.body as Rule);
    }
    /**
     * Update a specific rule.
     * @param ruleid ID of a Field.
     * @param rulePATCH The properties to update in the specified rule.
     * @param queryParams Query parameters to be sent with the request
     * @return Rule
     */
    public updateRuleById = (ruleid: string, rulePATCH: RulePATCH, queryParams?: object): Promise<Rule> => {
        const path_params = {
            ruleid: ruleid
        };
        const path = this.template`/catalog/v2beta1/rules/${'ruleid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), rulePATCH, { query: queryParams })
            .then(response => response.body as Rule);
    }
    /**
     * Update the workflow build with the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowBuildPATCH An updated representation of the workflow build to be persisted.
     * @param queryParams Query parameters to be sent with the request
     */
    public updateWorkflowBuildById = (workflowid: string, workflowbuildid: string, workflowBuildPATCH: WorkflowBuildPATCH, queryParams?: object): Promise<object> => {
        const path_params = {
            workflowid: workflowid,
            workflowbuildid: workflowbuildid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds/${'workflowbuildid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), workflowBuildPATCH, { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Update the workflow with the specified workflow ID.
     * @param workflowid ID of a workflow.
     * @param workflowPATCH An updated representation of the workflow to be persisted.
     * @param queryParams Query parameters to be sent with the request
     */
    public updateWorkflowById = (workflowid: string, workflowPATCH: WorkflowPATCH, queryParams?: object): Promise<object> => {
        const path_params = {
            workflowid: workflowid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), workflowPATCH, { query: queryParams })
            .then(response => response.body as object);
    }
    /**
     * Update the workflow run with the specified workflow run ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowrunid ID of a workflow run.
     * @param workflowRunPATCH An updated representation of the workflow run to be persisted.
     * @param queryParams Query parameters to be sent with the request
     */
    public updateWorkflowRunById = (workflowid: string, workflowbuildid: string, workflowrunid: string, workflowRunPATCH: WorkflowRunPATCH, queryParams?: object): Promise<object> => {
        const path_params = {
            workflowid: workflowid,
            workflowbuildid: workflowbuildid,
            workflowrunid: workflowrunid
        };
        const path = this.template`/catalog/v2beta1/workflows/${'workflowid'}/builds/${'workflowbuildid'}/runs/${'workflowrunid'}`(path_params);
        return this.client.patch(CATALOG_SERVICE_CLUSTER, this.client.buildPath('', path.split('/').slice(1)), workflowRunPATCH, { query: queryParams })
            .then(response => response.body as object);
    }
}
